"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/admin/analytics",{

/***/ "(pages-dir-browser)/./utils/adminApi.js":
/*!***************************!*\
  !*** ./utils/adminApi.js ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approveLeave: () => (/* binding */ approveLeave),\n/* harmony export */   createCourse: () => (/* binding */ createCourse),\n/* harmony export */   createEvent: () => (/* binding */ createEvent),\n/* harmony export */   createInvoice: () => (/* binding */ createInvoice),\n/* harmony export */   createLeaveRequest: () => (/* binding */ createLeaveRequest),\n/* harmony export */   createSchedule: () => (/* binding */ createSchedule),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   deleteCourse: () => (/* binding */ deleteCourse),\n/* harmony export */   deleteEvent: () => (/* binding */ deleteEvent),\n/* harmony export */   deleteInvoice: () => (/* binding */ deleteInvoice),\n/* harmony export */   deleteMessage: () => (/* binding */ deleteMessage),\n/* harmony export */   deleteSchedule: () => (/* binding */ deleteSchedule),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   getAllAnalytics: () => (/* binding */ getAllAnalytics),\n/* harmony export */   getAttendance: () => (/* binding */ getAttendance),\n/* harmony export */   getAttendanceAnalytics: () => (/* binding */ getAttendanceAnalytics),\n/* harmony export */   getClasses: () => (/* binding */ getClasses),\n/* harmony export */   getCourses: () => (/* binding */ getCourses),\n/* harmony export */   getDepartmentDistribution: () => (/* binding */ getDepartmentDistribution),\n/* harmony export */   getDepartments: () => (/* binding */ getDepartments),\n/* harmony export */   getEvents: () => (/* binding */ getEvents),\n/* harmony export */   getFacultyPerformance: () => (/* binding */ getFacultyPerformance),\n/* harmony export */   getInvoices: () => (/* binding */ getInvoices),\n/* harmony export */   getLeaveRequests: () => (/* binding */ getLeaveRequests),\n/* harmony export */   getMessages: () => (/* binding */ getMessages),\n/* harmony export */   getRevenueData: () => (/* binding */ getRevenueData),\n/* harmony export */   getSchedules: () => (/* binding */ getSchedules),\n/* harmony export */   getSections: () => (/* binding */ getSections),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   markInvoicePaid: () => (/* binding */ markInvoicePaid),\n/* harmony export */   rejectLeave: () => (/* binding */ rejectLeave),\n/* harmony export */   sendMessage: () => (/* binding */ sendMessage),\n/* harmony export */   updateAttendance: () => (/* binding */ updateAttendance),\n/* harmony export */   updateCourse: () => (/* binding */ updateCourse),\n/* harmony export */   updateEvent: () => (/* binding */ updateEvent),\n/* harmony export */   updateInvoice: () => (/* binding */ updateInvoice),\n/* harmony export */   updateLeaveStatus: () => (/* binding */ updateLeaveStatus),\n/* harmony export */   updateSchedule: () => (/* binding */ updateSchedule),\n/* harmony export */   updateUser: () => (/* binding */ updateUser)\n/* harmony export */ });\n/* harmony import */ var _mockData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mockData */ \"(pages-dir-browser)/./utils/mockData.js\");\n\n// Helper functions to simulate API calls using the mock data\n// =========== USER MANAGEMENT ===========\n/**\n * Get users (students or faculty) with optional filtering\n * @param {Object} queryParams - Filter parameters\n * @returns {Promise<Array>} - List of users\n */ const getUsers = async function() {\n    let queryParams = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const { role, departmentId, classId, sectionId, search } = queryParams;\n    // Determine which data set to use based on role\n    let userData = role === 'faculty' ? [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty\n    ] : [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents\n    ];\n    // Apply filters\n    if (departmentId) {\n        userData = userData.filter((user)=>user.departmentId === parseInt(departmentId));\n    }\n    if (classId && role === 'student') {\n        userData = userData.filter((user)=>user.classId === parseInt(classId));\n    }\n    if (sectionId && role === 'student') {\n        userData = userData.filter((user)=>user.sectionId === parseInt(sectionId));\n    }\n    if (search) {\n        const searchLower = search.toLowerCase();\n        userData = userData.filter((user)=>user.name.toLowerCase().includes(searchLower) || user.email.toLowerCase().includes(searchLower));\n    }\n    return userData;\n};\n/**\n * Get departments\n * @returns {Promise<Array>} - List of departments\n */ const getDepartments = async ()=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    return [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockDepartments\n    ];\n};\n/**\n * Get classes with optional department filter\n * @param {number} departmentId - Department ID filter\n * @returns {Promise<Array>} - List of classes\n */ const getClasses = async (departmentId)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    let classData = [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockClasses\n    ];\n    if (departmentId) {\n        classData = classData.filter((cls)=>cls.departmentId === parseInt(departmentId));\n    }\n    return classData;\n};\n/**\n * Get sections with optional class filter\n * @param {number} classId - Class ID filter\n * @returns {Promise<Array>} - List of sections\n */ const getSections = async (classId)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    let sectionData = [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockSections\n    ];\n    if (classId) {\n        sectionData = sectionData.filter((section)=>section.classId === parseInt(classId));\n    }\n    return sectionData;\n};\n/**\n * Create a new user\n * @param {Object} userData - User data\n * @returns {Promise<Object>} - Created user\n */ const createUser = async (userData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    // Generate a new ID (in a real app, this would come from the backend)\n    const newId = userData.role === 'faculty' ? Math.max(..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.map((f)=>f.id)) + 1 : Math.max(..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.map((s)=>s.id)) + 1;\n    const newUser = {\n        ...userData,\n        id: newId,\n        password_hash: 'hashed_' + userData.password,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    };\n    // Add to the appropriate mock data array\n    if (userData.role === 'faculty') {\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.push(newUser);\n    } else {\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.push(newUser);\n    }\n    return newUser;\n};\n/**\n * Update an existing user\n * @param {number} userId - User ID\n * @param {Object} userData - Updated user data\n * @returns {Promise<Object>} - Updated user\n */ const updateUser = async (userId, userData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    const id = parseInt(userId);\n    const isStudent = userData.role === 'student';\n    let userIndex;\n    let user;\n    if (isStudent) {\n        userIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.findIndex((s)=>s.id === id);\n        if (userIndex === -1) throw new Error('Student not found');\n        user = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents[userIndex];\n    } else {\n        userIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.findIndex((f)=>f.id === id);\n        if (userIndex === -1) throw new Error('Faculty not found');\n        user = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty[userIndex];\n    }\n    // Update user data\n    const updatedUser = {\n        ...user,\n        name: userData.name,\n        email: userData.email,\n        departmentId: userData.departmentId,\n        updated_at: new Date().toISOString()\n    };\n    // Update password if provided\n    if (userData.password) {\n        updatedUser.password_hash = 'hashed_' + userData.password;\n    }\n    // Update student-specific fields\n    if (isStudent) {\n        updatedUser.classId = userData.classId;\n        updatedUser.sectionId = userData.sectionId;\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents[userIndex] = updatedUser;\n    } else {\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty[userIndex] = updatedUser;\n    }\n    return updatedUser;\n};\n/**\n * Delete a user\n * @param {number} userId - User ID\n * @returns {Promise<boolean>} - Success status\n */ const deleteUser = async (userId)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const id = parseInt(userId);\n    // Try to find and delete from students\n    const studentIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.findIndex((s)=>s.id === id);\n    if (studentIndex !== -1) {\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.splice(studentIndex, 1);\n        return true;\n    }\n    // Try to find and delete from faculty\n    const facultyIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.findIndex((f)=>f.id === id);\n    if (facultyIndex !== -1) {\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.splice(facultyIndex, 1);\n        return true;\n    }\n    throw new Error('User not found');\n};\n// =========== COURSES ===========\n/**\n * Get all courses with optional filters\n * @param {Object} queryParams - Filter parameters\n * @returns {Promise<Array>} - List of courses\n */ const getCourses = async function() {\n    let queryParams = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const { departmentId, search } = queryParams;\n    let courses = [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses\n    ];\n    if (departmentId) {\n        courses = courses.filter((course)=>course.departmentId === parseInt(departmentId));\n    }\n    if (search) {\n        const searchLower = search.toLowerCase();\n        courses = courses.filter((course)=>course.name.toLowerCase().includes(searchLower) || course.course_code.toLowerCase().includes(searchLower));\n    }\n    return courses;\n};\n/**\n * Create a new course\n * @param {Object} courseData - Course data\n * @returns {Promise<Object>} - Created course\n */ const createCourse = async (courseData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    const newId = Math.max(..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.map((c)=>c.id)) + 1;\n    const newCourse = {\n        ...courseData,\n        id: newId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.push(newCourse);\n    return newCourse;\n};\n/**\n * Update an existing course\n * @param {number} courseId - Course ID\n * @param {Object} courseData - Updated course data\n * @returns {Promise<Object>} - Updated course\n */ const updateCourse = async (courseId, courseData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    const id = parseInt(courseId);\n    const courseIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.findIndex((c)=>c.id === id);\n    if (courseIndex === -1) throw new Error('Course not found');\n    const course = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses[courseIndex];\n    const updatedCourse = {\n        ...course,\n        ...courseData,\n        id,\n        updated_at: new Date().toISOString()\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses[courseIndex] = updatedCourse;\n    return updatedCourse;\n};\n/**\n * Delete a course\n * @param {number} courseId - Course ID\n * @returns {Promise<boolean>} - Success status\n */ const deleteCourse = async (courseId)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const id = parseInt(courseId);\n    const courseIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.findIndex((c)=>c.id === id);\n    if (courseIndex === -1) throw new Error('Course not found');\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.splice(courseIndex, 1);\n    return true;\n};\n// =========== TIMETABLE / SCHEDULES ===========\n/**\n * Get schedules with optional filters\n * @param {Object} queryParams - Filter parameters\n * @returns {Promise<Array>} - List of schedules\n */ const getSchedules = async function() {\n    let queryParams = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const { view_type, departmentId, classId, sectionId, facultyId, day } = queryParams;\n    let schedules = [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockSchedules\n    ];\n    if (day) {\n        schedules = schedules.filter((schedule)=>schedule.day_of_week === day);\n    }\n    if (view_type === 'student') {\n        // Student view filters\n        if (departmentId && !classId) {\n            schedules = schedules.filter((schedule)=>{\n                var _mockClasses_find;\n                return ((_mockClasses_find = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockClasses.find((c)=>c.id === schedule.classId)) === null || _mockClasses_find === void 0 ? void 0 : _mockClasses_find.departmentId) === parseInt(departmentId);\n            });\n        }\n        if (classId) {\n            schedules = schedules.filter((schedule)=>schedule.classId === parseInt(classId));\n        }\n        if (sectionId) {\n            schedules = schedules.filter((schedule)=>schedule.sectionId === parseInt(sectionId));\n        }\n    } else {\n        // Faculty view filters\n        if (facultyId) {\n            schedules = schedules.filter((schedule)=>schedule.facultyId === parseInt(facultyId));\n        }\n        if (departmentId) {\n            schedules = schedules.filter((schedule)=>{\n                var _mockFaculty_find;\n                return ((_mockFaculty_find = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.find((f)=>f.id === schedule.facultyId)) === null || _mockFaculty_find === void 0 ? void 0 : _mockFaculty_find.departmentId) === parseInt(departmentId);\n            });\n        }\n    }\n    // Add related data (in a real implementation, this would be done with joins in the database query)\n    const schedulesWithRelated = schedules.map((schedule)=>{\n        const course = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.find((c)=>c.id === schedule.courseId);\n        const faculty = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.find((f)=>f.id === schedule.facultyId);\n        const classInfo = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockClasses.find((c)=>c.id === schedule.classId);\n        const section = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSections.find((s)=>s.id === schedule.sectionId);\n        return {\n            ...schedule,\n            course,\n            faculty,\n            class: classInfo,\n            section\n        };\n    });\n    return schedulesWithRelated;\n};\n/**\n * Create a new schedule\n * @param {Object} scheduleData - Schedule data\n * @returns {Promise<Object>} - Created schedule\n */ const createSchedule = async (scheduleData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    const newId = Math.max(..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockSchedules.map((s)=>s.id)) + 1;\n    const newSchedule = {\n        ...scheduleData,\n        id: newId\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSchedules.push(newSchedule);\n    // Return with related data\n    const course = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.find((c)=>c.id === newSchedule.courseId);\n    const faculty = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.find((f)=>f.id === newSchedule.facultyId);\n    const classInfo = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockClasses.find((c)=>c.id === newSchedule.classId);\n    const section = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSections.find((s)=>s.id === newSchedule.sectionId);\n    return {\n        ...newSchedule,\n        course,\n        faculty,\n        class: classInfo,\n        section\n    };\n};\n/**\n * Update a schedule\n * @param {number} scheduleId - Schedule ID\n * @param {Object} scheduleData - Updated schedule data\n * @returns {Promise<Object>} - Updated schedule\n */ const updateSchedule = async (scheduleId, scheduleData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    const id = parseInt(scheduleId);\n    const scheduleIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSchedules.findIndex((s)=>s.id === id);\n    if (scheduleIndex === -1) throw new Error('Schedule not found');\n    const schedule = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSchedules[scheduleIndex];\n    const updatedSchedule = {\n        ...schedule,\n        ...scheduleData,\n        id\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSchedules[scheduleIndex] = updatedSchedule;\n    // Return with related data\n    const course = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.find((c)=>c.id === updatedSchedule.courseId);\n    const faculty = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.find((f)=>f.id === updatedSchedule.facultyId);\n    const classInfo = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockClasses.find((c)=>c.id === updatedSchedule.classId);\n    const section = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSections.find((s)=>s.id === updatedSchedule.sectionId);\n    return {\n        ...updatedSchedule,\n        course,\n        faculty,\n        class: classInfo,\n        section\n    };\n};\n/**\n * Delete a schedule\n * @param {number} scheduleId - Schedule ID\n * @returns {Promise<boolean>} - Success status\n */ const deleteSchedule = async (scheduleId)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const id = parseInt(scheduleId);\n    const scheduleIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSchedules.findIndex((s)=>s.id === id);\n    if (scheduleIndex === -1) throw new Error('Schedule not found');\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSchedules.splice(scheduleIndex, 1);\n    return true;\n};\n// =========== ATTENDANCE ===========\n/**\n * Get attendance with optional filters\n * @param {Object} queryParams - Filter parameters\n * @returns {Promise<Array>} - List of attendance records\n */ const getAttendance = async function() {\n    let queryParams = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const { view_type, departmentId, classId, sectionId, courseId, facultyId, date, status } = queryParams;\n    let attendance = [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockAttendance\n    ];\n    if (date) {\n        const dateObj = new Date(date);\n        const year = dateObj.getFullYear();\n        const month = dateObj.getMonth();\n        const day = dateObj.getDate();\n        attendance = attendance.filter((a)=>{\n            const recordDate = new Date(a.date);\n            return recordDate.getFullYear() === year && recordDate.getMonth() === month && recordDate.getDate() === day;\n        });\n    }\n    if (status) {\n        attendance = attendance.filter((a)=>a.status === status);\n    }\n    if (view_type === 'student') {\n        // Student attendance filters\n        if (courseId) {\n            attendance = attendance.filter((a)=>a.courseId === parseInt(courseId));\n        }\n        if (departmentId || classId || sectionId) {\n            attendance = attendance.filter((a)=>{\n                const student = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.find((s)=>s.id === a.studentId);\n                if (!student) return false;\n                if (departmentId && student.departmentId !== parseInt(departmentId)) return false;\n                if (classId && student.classId !== parseInt(classId)) return false;\n                if (sectionId && student.sectionId !== parseInt(sectionId)) return false;\n                return true;\n            });\n        }\n    } else {\n        // Faculty view would be implemented differently\n        // For now, we'll return empty for faculty view to match the current implementation\n        return [];\n    }\n    // Add related data\n    const attendanceWithRelated = attendance.map((record)=>{\n        const student = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.find((s)=>s.id === record.studentId);\n        const course = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.find((c)=>c.id === record.courseId);\n        return {\n            ...record,\n            student,\n            course\n        };\n    });\n    return attendanceWithRelated;\n};\n/**\n * Update attendance status\n * @param {number} attendanceId - Attendance ID\n * @param {Object} data - Update data (status)\n * @returns {Promise<Object>} - Updated attendance record\n */ const updateAttendance = async (attendanceId, data)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const id = parseInt(attendanceId);\n    const attendanceIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAttendance.findIndex((a)=>a.id === id);\n    if (attendanceIndex === -1) throw new Error('Attendance record not found');\n    const attendance = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAttendance[attendanceIndex];\n    const updatedAttendance = {\n        ...attendance,\n        status: data.status\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAttendance[attendanceIndex] = updatedAttendance;\n    // Return with related data\n    const student = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.find((s)=>s.id === updatedAttendance.studentId);\n    const course = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.find((c)=>c.id === updatedAttendance.courseId);\n    return {\n        ...updatedAttendance,\n        student,\n        course\n    };\n};\n/**\n * Get attendance analytics\n * @returns {Promise<Object>} - Attendance analytics data\n */ const getAttendanceAnalytics = async ()=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    return _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAttendanceAnalytics;\n};\n// =========== EVENTS ===========\n/**\n * Get events with optional filters\n * @param {Object} queryParams - Filter parameters\n * @returns {Promise<Array>} - List of events\n */ const getEvents = async function() {\n    let queryParams = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const { from_date, to_date, audience_type } = queryParams;\n    let events = [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockEvents\n    ];\n    if (from_date) {\n        const fromDate = new Date(from_date);\n        events = events.filter((event)=>new Date(event.event_date) >= fromDate);\n    }\n    if (to_date) {\n        const toDate = new Date(to_date);\n        events = events.filter((event)=>new Date(event.event_date) <= toDate);\n    }\n    // Todo: Add audience_type filtering if needed\n    return events;\n};\n/**\n * Create a new event\n * @param {Object} eventData - Event data\n * @returns {Promise<Object>} - Created event\n */ const createEvent = async (eventData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    const newId = Math.max(..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockEvents.map((e)=>e.id)) + 1;\n    const newEvent = {\n        ...eventData,\n        id: newId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockEvents.push(newEvent);\n    return newEvent;\n};\n/**\n * Update an event\n * @param {number} eventId - Event ID\n * @param {Object} eventData - Updated event data\n * @returns {Promise<Object>} - Updated event\n */ const updateEvent = async (eventId, eventData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    const id = parseInt(eventId);\n    const eventIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockEvents.findIndex((e)=>e.id === id);\n    if (eventIndex === -1) throw new Error('Event not found');\n    const event = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockEvents[eventIndex];\n    const updatedEvent = {\n        ...event,\n        ...eventData,\n        id,\n        updated_at: new Date().toISOString()\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockEvents[eventIndex] = updatedEvent;\n    return updatedEvent;\n};\n/**\n * Delete an event\n * @param {number} eventId - Event ID\n * @returns {Promise<boolean>} - Success status\n */ const deleteEvent = async (eventId)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const id = parseInt(eventId);\n    const eventIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockEvents.findIndex((e)=>e.id === id);\n    if (eventIndex === -1) throw new Error('Event not found');\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockEvents.splice(eventIndex, 1);\n    return true;\n};\n// =========== INVOICES ===========\n/**\n * Get invoices with optional filters\n * @param {Object} queryParams - Filter parameters\n * @returns {Promise<Array>} - List of invoices\n */ const getInvoices = async function() {\n    let queryParams = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const { studentId, paid, from_date, to_date } = queryParams;\n    let invoices = [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockInvoices\n    ];\n    if (studentId) {\n        invoices = invoices.filter((invoice)=>invoice.studentId === parseInt(studentId));\n    }\n    if (paid !== undefined) {\n        const isPaid = paid === 'true' || paid === true;\n        invoices = invoices.filter((invoice)=>invoice.paid === isPaid);\n    }\n    if (from_date) {\n        const fromDate = new Date(from_date);\n        invoices = invoices.filter((invoice)=>new Date(invoice.generated_at) >= fromDate);\n    }\n    if (to_date) {\n        const toDate = new Date(to_date);\n        invoices = invoices.filter((invoice)=>new Date(invoice.generated_at) <= toDate);\n    }\n    // Add student data to each invoice\n    const invoicesWithStudents = invoices.map((invoice)=>{\n        const student = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.find((s)=>s.id === invoice.studentId);\n        return {\n            ...invoice,\n            student\n        };\n    });\n    return invoicesWithStudents;\n};\n/**\n * Create a new invoice\n * @param {Object} invoiceData - Invoice data\n * @returns {Promise<Object>} - Created invoice\n */ const createInvoice = async (invoiceData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    const newId = Math.max(..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockInvoices.map((i)=>i.id)) + 1;\n    // Generate invoice number\n    const today = new Date();\n    const invoiceNumber = \"INV-\".concat(today.getFullYear(), \"-\").concat(String(newId).padStart(3, '0'));\n    const newInvoice = {\n        ...invoiceData,\n        id: newId,\n        invoice_number: invoiceNumber,\n        paid: false,\n        generated_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockInvoices.push(newInvoice);\n    // Add student data\n    const student = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.find((s)=>s.id === newInvoice.studentId);\n    return {\n        ...newInvoice,\n        student\n    };\n};\n/**\n * Update an invoice\n * @param {number} invoiceId - Invoice ID\n * @param {Object} invoiceData - Updated invoice data\n * @returns {Promise<Object>} - Updated invoice\n */ const updateInvoice = async (invoiceId, invoiceData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    const id = parseInt(invoiceId);\n    const invoiceIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockInvoices.findIndex((i)=>i.id === id);\n    if (invoiceIndex === -1) throw new Error('Invoice not found');\n    const invoice = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockInvoices[invoiceIndex];\n    const updatedInvoice = {\n        ...invoice,\n        ...invoiceData,\n        id,\n        updated_at: new Date().toISOString()\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockInvoices[invoiceIndex] = updatedInvoice;\n    // Add student data\n    const student = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.find((s)=>s.id === updatedInvoice.studentId);\n    return {\n        ...updatedInvoice,\n        student\n    };\n};\n/**\n * Delete an invoice\n * @param {number} invoiceId - Invoice ID\n * @returns {Promise<boolean>} - Success status\n */ const deleteInvoice = async (invoiceId)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const id = parseInt(invoiceId);\n    const invoiceIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockInvoices.findIndex((i)=>i.id === id);\n    if (invoiceIndex === -1) throw new Error('Invoice not found');\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockInvoices.splice(invoiceIndex, 1);\n    return true;\n};\n/**\n * Mark an invoice as paid\n * @param {number} invoiceId - Invoice ID\n * @returns {Promise<Object>} - Updated invoice\n */ const markInvoicePaid = async (invoiceId)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const id = parseInt(invoiceId);\n    const invoiceIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockInvoices.findIndex((i)=>i.id === id);\n    if (invoiceIndex === -1) throw new Error('Invoice not found');\n    const invoice = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockInvoices[invoiceIndex];\n    const updatedInvoice = {\n        ...invoice,\n        paid: true,\n        updated_at: new Date().toISOString()\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockInvoices[invoiceIndex] = updatedInvoice;\n    // Add student data\n    const student = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.find((s)=>s.id === updatedInvoice.studentId);\n    return {\n        ...updatedInvoice,\n        student\n    };\n};\n// =========== MESSAGES ===========\n/**\n * Get messages with optional filters\n * @param {Object} queryParams - Filter parameters\n * @returns {Promise<Array>} - List of messages\n */ const getMessages = async function() {\n    let queryParams = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const { filter } = queryParams;\n    // Admin ID (in a real app, would come from auth)\n    const adminId = 1;\n    let messages = [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockMessages\n    ];\n    if (filter === 'inbox') {\n        // Messages received by admin\n        messages = messages.filter((msg)=>msg.receiver_id === adminId && msg.receiver_type === 'admin');\n    } else if (filter === 'sent') {\n        // Messages sent by admin\n        messages = messages.filter((msg)=>msg.sender_id === adminId && msg.sender_type === 'admin');\n    } else {\n        // All messages (both sent and received)\n        messages = messages.filter((msg)=>msg.sender_id === adminId && msg.sender_type === 'admin' || msg.receiver_id === adminId && msg.receiver_type === 'admin');\n    }\n    // Enhance messages with sender and receiver names\n    // In a real implementation, this would be handled with joins in the database query\n    const enhancedMessages = messages.map((message)=>{\n        let senderName = 'Unknown';\n        let receiverName = 'Unknown';\n        // Get sender name\n        if (message.sender_type === 'student') {\n            const student = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.find((s)=>s.id === message.sender_id);\n            senderName = student ? student.name : 'Unknown Student';\n        } else if (message.sender_type === 'faculty') {\n            const faculty = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.find((f)=>f.id === message.sender_id);\n            senderName = faculty ? faculty.name : 'Unknown Faculty';\n        } else if (message.sender_type === 'admin') {\n            senderName = 'Admin User';\n        }\n        // Get receiver name\n        if (message.receiver_type === 'student') {\n            const student = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.find((s)=>s.id === message.receiver_id);\n            receiverName = student ? student.name : 'Unknown Student';\n        } else if (message.receiver_type === 'faculty') {\n            const faculty = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.find((f)=>f.id === message.receiver_id);\n            receiverName = faculty ? faculty.name : 'Unknown Faculty';\n        } else if (message.receiver_type === 'admin') {\n            receiverName = 'Admin User';\n        }\n        return {\n            ...message,\n            sender_name: senderName,\n            receiver_name: receiverName\n        };\n    });\n    return enhancedMessages;\n};\n/**\n * Send a new message\n * @param {Object} messageData - Message data\n * @returns {Promise<Object>} - Created message\n */ const sendMessage = async (messageData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    const newId = Math.max(..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockMessages.map((m)=>m.id)) + 1;\n    // Admin ID (in a real app, would come from auth)\n    const adminId = 1;\n    const newMessage = {\n        ...messageData,\n        id: newId,\n        sender_id: adminId,\n        sender_type: 'admin',\n        sent_at: new Date().toISOString()\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockMessages.push(newMessage);\n    // Get sender and receiver names\n    let senderName = 'Admin User';\n    let receiverName = 'Unknown';\n    if (newMessage.receiver_type === 'student') {\n        const student = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.find((s)=>s.id === newMessage.receiver_id);\n        receiverName = student ? student.name : 'Unknown Student';\n    } else if (newMessage.receiver_type === 'faculty') {\n        const faculty = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.find((f)=>f.id === newMessage.receiver_id);\n        receiverName = faculty ? faculty.name : 'Unknown Faculty';\n    } else if (newMessage.receiver_type === 'admin') {\n        const admin = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockStudents.find((a)=>a.id === newMessage.receiver_id);\n        receiverName = admin ? admin.name : 'Admin User';\n    }\n    return {\n        ...newMessage,\n        sender_name: senderName,\n        receiver_name: receiverName\n    };\n};\n/**\n * Delete a message\n * @param {number} messageId - Message ID\n * @returns {Promise<boolean>} - Success status\n */ const deleteMessage = async (messageId)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const id = parseInt(messageId);\n    const messageIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockMessages.findIndex((m)=>m.id === id);\n    if (messageIndex === -1) throw new Error('Message not found');\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockMessages.splice(messageIndex, 1);\n    return true;\n};\n// =========== LEAVE REQUESTS ===========\n/**\n * Get leave requests with optional filters\n * @param {Object} queryParams - Filter parameters\n * @returns {Promise<Array>} - List of leave requests\n */ const getLeaveRequests = async function() {\n    let queryParams = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const { status, departmentId, facultyId, date_from, date_to } = queryParams;\n    let leaveRequests = [\n        ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockLeaveRequests\n    ];\n    if (status) {\n        leaveRequests = leaveRequests.filter((request)=>request.status === status);\n    }\n    if (departmentId) {\n        leaveRequests = leaveRequests.filter((request)=>request.departmentId === parseInt(departmentId));\n    }\n    if (facultyId) {\n        leaveRequests = leaveRequests.filter((request)=>request.facultyId === parseInt(facultyId));\n    }\n    if (date_from) {\n        const fromDate = new Date(date_from);\n        leaveRequests = leaveRequests.filter((request)=>new Date(request.leave_date) >= fromDate);\n    }\n    if (date_to) {\n        const toDate = new Date(date_to);\n        leaveRequests = leaveRequests.filter((request)=>new Date(request.leave_date) <= toDate);\n    }\n    // Add related data\n    const requestsWithRelated = leaveRequests.map((request)=>{\n        const faculty = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.find((f)=>f.id === request.facultyId);\n        const department = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockDepartments.find((d)=>d.id === request.departmentId);\n        const classInfo = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockClasses.find((c)=>c.id === request.classId);\n        const section = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSections.find((s)=>s.id === request.sectionId);\n        const course = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.find((c)=>c.id === request.courseId);\n        return {\n            ...request,\n            faculty,\n            department,\n            class: classInfo,\n            section,\n            course\n        };\n    });\n    return requestsWithRelated;\n};\n/**\n * Create a new leave request\n * @param {Object} leaveData - Leave request data\n * @returns {Promise<Object>} - Created leave request\n */ const createLeaveRequest = async (leaveData)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    const newId = Math.max(..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockLeaveRequests.map((r)=>r.id)) + 1;\n    const newRequest = {\n        ...leaveData,\n        id: newId,\n        status: 'Pending',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockLeaveRequests.push(newRequest);\n    // Add related data\n    const faculty = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.find((f)=>f.id === newRequest.facultyId);\n    const department = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockDepartments.find((d)=>d.id === newRequest.departmentId);\n    const classInfo = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockClasses.find((c)=>c.id === newRequest.classId);\n    const section = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSections.find((s)=>s.id === newRequest.sectionId);\n    const course = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.find((c)=>c.id === newRequest.courseId);\n    return {\n        ...newRequest,\n        faculty,\n        department,\n        class: classInfo,\n        section,\n        course\n    };\n};\n/**\n * Update leave request status\n * @param {number} leaveId - Leave request ID\n * @param {Object} data - Update data (status)\n * @returns {Promise<Object>} - Updated leave request\n */ const updateLeaveStatus = async (leaveId, data)=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const id = parseInt(leaveId);\n    const leaveIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockLeaveRequests.findIndex((r)=>r.id === id);\n    if (leaveIndex === -1) throw new Error('Leave request not found');\n    const leave = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockLeaveRequests[leaveIndex];\n    const updatedLeave = {\n        ...leave,\n        status: data.status,\n        updated_at: new Date().toISOString()\n    };\n    _mockData__WEBPACK_IMPORTED_MODULE_0__.mockLeaveRequests[leaveIndex] = updatedLeave;\n    // Add related data\n    const faculty = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFaculty.find((f)=>f.id === updatedLeave.facultyId);\n    const department = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockDepartments.find((d)=>d.id === updatedLeave.departmentId);\n    const classInfo = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockClasses.find((c)=>c.id === updatedLeave.classId);\n    const section = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockSections.find((s)=>s.id === updatedLeave.sectionId);\n    const course = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockCourses.find((c)=>c.id === updatedLeave.courseId);\n    return {\n        ...updatedLeave,\n        faculty,\n        department,\n        class: classInfo,\n        section,\n        course\n    };\n};\n/**\n * Approve a leave request\n * @param {number} leaveId - Leave request ID\n * @returns {Promise<Object>} - Updated leave request\n */ const approveLeave = async (leaveId)=>{\n    return updateLeaveStatus(leaveId, {\n        status: 'Approved'\n    });\n};\n/**\n * Reject a leave request\n * @param {number} leaveId - Leave request ID\n * @returns {Promise<Object>} - Updated leave request\n */ const rejectLeave = async (leaveId)=>{\n    return updateLeaveStatus(leaveId, {\n        status: 'Rejected'\n    });\n};\n// =========== ANALYTICS ===========\n/**\n * Get all analytics data\n * @returns {Promise<Object>} - Analytics data\n */ const getAllAnalytics = async ()=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    return {\n        departmentDistribution: _mockData__WEBPACK_IMPORTED_MODULE_0__.mockDepartmentDistribution,\n        facultyPerformance: _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFacultyPerformance,\n        revenueData: _mockData__WEBPACK_IMPORTED_MODULE_0__.mockRevenueData,\n        attendanceAnalytics: _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAttendanceAnalytics\n    };\n};\n/**\n * Get department distribution analytics\n * @returns {Promise<Object>} - Department distribution data\n */ const getDepartmentDistribution = async ()=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    return _mockData__WEBPACK_IMPORTED_MODULE_0__.mockDepartmentDistribution;\n};\n/**\n * Get faculty performance analytics\n * @returns {Promise<Object>} - Faculty performance data\n */ const getFacultyPerformance = async ()=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    return _mockData__WEBPACK_IMPORTED_MODULE_0__.mockFacultyPerformance;\n};\n/**\n * Get revenue analytics\n * @returns {Promise<Object>} - Revenue data\n */ const getRevenueData = async ()=>{\n    // Simulate network request\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    return _mockData__WEBPACK_IMPORTED_MODULE_0__.mockRevenueData;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./utils/adminApi.js\n"));

/***/ })

});